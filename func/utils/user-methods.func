() usr::buy_ton(int msg_value, slice in_msg_body) impure {
    init_data();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice sender_addr = in_msg_body~load_msg_addr();

    (int ton_amount, _, int fee) = get_price_ton(jetton_amount);
    throw_if(err::no_balance(), ton_amount >= int_gbl::balance);

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_addr)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg::biton_to_ton());
    send_raw_message(msg.end_cell(), 1);

    biton_balance += jetton_amount;
    collect_fee += fee;
    pack_data();
}


() usr::buy_biton(int msg_value, slice sender_address) impure {
    init_data();
    msg_value -= operation_price;
    msg_value -= 15000000; ;; 0,015 ton(notification)
    throw_if(err::small_trans(), msg_value <= 500000000);
    (int jetton_amount, _, int fee) = get_price_biton(msg_value);

    throw_if(err::no_balance(), jetton_amount >= biton_balance);



    ;; jetton wallet msg
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32) ;; 0xf8a7ea5
        .store_uint(cur_lt(), 64) ;; query_id
        .store_coins(jetton_amount) ;; jetton amount
        .store_slice(sender_address) ;; sender addr
        .store_slice(sender_address) ;;  response_addr
        .store_int(0, 1) ;; custom payload
        .store_coins(0)  ;; forward ton amount
        .store_int(0, 1) ;; forward ton amount
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(operation_price)
        ;; last bit in 107 bits is "1", mean that body:(Either X ^X) in ref
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);




    ;; notification msg
    var notification_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg::ton_to_biton());
    send_raw_message(notification_msg.end_cell(), 3);
    collect_fee += fee;
    biton_balance -= jetton_amount;
    pack_data();
}
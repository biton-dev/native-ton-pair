#include "lib/stdlib.func";
#include "lib/extlib.func";
#include "utils/storage.func";
#include "utils/op-codes.func";
#include "utils/exit-codes.func";
#include "utils/msg-utils.func";
#include "utils/get-methods.func";
#include "utils/math.func";
#include "utils/event.func";
#include "utils/lp.func";
#include "utils/admin-methods.func";
#include "utils/user-methods.func";
#include "utils/handles.func";





() recv_internal(int balance, int msg_value, cell in_msg_cell, slice in_msg_body) impure {
    int_gbl::balance = balance;
    init_data();

    slice cs = in_msg_cell.begin_parse();
    
    throw_if(0, cs~load_uint(4) & 1); ;; ignore bounce

    slice sender_address = cs~load_msg_addr();


    int is_jetton_init? = ~(equal_slices(jetton_addr, extlib::addr_none()));
    if (~ is_jetton_init?) {
        handle::init_jetton(in_msg_body, sender_address);
        return ();
    }


    if (equal_slices(sender_address, project_addr)) {
        handle::admin_methods(in_msg_body);
        return ();
    }
    if (equal_slices(sender_address, lp_jwall_addr)) {
        handle::lp_jwall_methods(sender_address, msg_value, in_msg_body);
        return ();
    }
    else {
        handle::user_methods(sender_address, msg_value, in_msg_body);
        return ();
    }
}

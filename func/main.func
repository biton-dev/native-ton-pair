global int int_gbl::balance;

() buy_biton(int msg_value, slice sender_address) impure {
    init_data();
    msg_value -= operation_price;
    throw_if(err::small_trans(), msg_value <= 500000000);
    (int jetton_amount, _, int fee) = get_price_biton(msg_value);

    throw_if(err::no_balance(), jetton_amount >= biton_balance);

    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32) ;; 0xf8a7ea5
        .store_uint(cur_lt(), 64) ;; query_id
        .store_coins(jetton_amount) ;; jetton amount
        .store_slice(sender_address) ;; sender addr
        .store_slice(sender_address) ;;  response_addr
        .store_int(0, 1) ;; custom payload
        .store_coins(0)  ;; forward ton amount
        .store_int(0, 1) ;; forward ton amount
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(operation_price)
        ;; last bit in 107 bits is "1", mean that body:(Either X ^X) in ref
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);

    var notification_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg::ton_to_biton());
    send_raw_message(notification_msg.end_cell(), 3);
    collect_fee += fee;
    biton_balance -= jetton_amount;
    pack_data();
}


() buy_ton(int msg_value, slice in_msg_body) impure {
    init_data();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice sender_addr = in_msg_body~load_msg_addr();
    
    if (in_msg_body.slice_empty?()) {
        (int ton_amount, _, int fee) = get_price_ton(jetton_amount);

        throw_if(err::no_balance(), ton_amount >= int_gbl::balance);

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_addr)
            .store_coins(ton_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32)
            .store_slice(msg::biton_to_ton());
        send_raw_message(msg.end_cell(), 1);

        biton_balance += jetton_amount;
        collect_fee += fee;
        pack_data();
    }
    else {
        int op = in_msg_body~load_uint(32);

        if(op == op::add_liquidity()) {
            biton_balance += jetton_amount;
            pack_data();
        }
    }
}


() withdraw_ton(slice in_msg_body) impure {
    init_data();
    int amount = in_msg_body~load_coins();
    throw_if(err::no_balance(), amount > int_gbl::balance);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(project_addr)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), 3);
}

() withdraw_biton(slice in_msg_body) impure {
    init_data();
    int amount = in_msg_body~load_coins();
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(cur_lt(), 64)
        .store_coins(amount)
        .store_slice(project_addr) ;; destina
        .end_cell();
    throw_if(err::no_balance(), amount > biton_balance);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(500000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), 3);
    biton_balance -= amount;
}


() withdraw_fee() impure {
    init_data();
    throw_if(err::small_fee(), collect_fee == 0);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(collect_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg::withdraw_fee());
    send_raw_message(msg.end_cell(), 2);
}


() recv_internal(int balance, int msg_value, cell in_msg_cell, slice in_msg_body) impure {
    int_gbl::balance = balance;
    init_data();

    slice cs = in_msg_cell.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return();
    }
    slice sender_address = cs~load_msg_addr();

    int is_jetton_init? = ~(equal_slices(jetton_addr, extlib::addr_none()));

    if (~ is_jetton_init?) {
        in_msg_body~skip_bits(32 + 64);
        biton_balance = in_msg_body~load_coins();
        jetton_addr = sender_address;
        pack_data();
        return();
    }

    if (in_msg_body.slice_empty?()) { ;; just buy biton

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(project_addr)
                .store_coins(12281)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        send_raw_message(msg.end_cell(), 1);
        buy_biton(msg_value, sender_address);
        return ();
    }
    int op = in_msg_body~load_uint(32);

    if (op == op::transfer_notification()) {
        throw_unless(err::fake_addr(), equal_slices(jetton_addr, sender_address));
        buy_ton(msg_value, in_msg_body);
        return ();
    }

    if (op == op::change_operation_price()) {
        throw_unless(err::fake_addr(), equal_slices(project_addr, sender_address));
        operation_price = in_msg_body~load_coins();
        pack_data();
        return ();
    }

    if (op == op::add_liquidity()) {
        return ();
    }

    if (op == op::withdraw_liquidity()) {
       throw_unless(err::fake_addr(), equal_slices(project_addr, sender_address));
       int curr = in_msg_body~load_uint(1);
       if (curr == 0) {
            withdraw_ton(in_msg_body);
       }
       if (curr == 1) {
            withdraw_biton(in_msg_body);
       }
       return ();
    }

    if (op == op::withdraw_fee()) {
        throw_unless(err::fake_addr(), equal_slices(project_addr, sender_address));
        withdraw_fee();
        return ();
    }
    throw(1337);
}
